* 実装

  [新規作業項目] 
    【優先度高】ユーザがMinIO単体版をインストール・起動する手順書を作成

     全体の概要が俯瞰できるチャートなどを作成する (文章ではばらばらで
     概要が把握しにくいため) 


  [全体構成]


MinIO


System utilities:
	gfarm-s3-login			-- Interface for WebAPi
					   start/stop/status MinIO
					   update user_port_map & rewrite.conf
	gfarm-s3-server			-- start/stop MinIO

User_map administration tools:
	gfarm-s3-configtest		-- Check gfarm_s3_local_user_map consistency
	gfarm-s3-useradd		-- Add a user to gfarm_s3_local_user_map
	gfarm-s3-viusermap		-- Edit gfarm_s3_local_user_map
	gfarm-s3-generate-usermap-hpci	-- Generate gfarm_s3_local_user_map from grid-mapfile
	gfarm-s3-sharedsecret-password	-- Show user's "gfkey -l" hash

Tools for develop/debug purpose:
	gfarm-s3-diff-local-usermap
	gfarm-s3-update-reverse-proxy

Subroutines:
	gfarm-s3-subr			-- subroutine collection

Configuration files:
	gfarm-s3.conf			-- Main configuration

	gfarm.pc			-- pkg-config description
					   NG /usr/local/lib/pkgconfing
					   NG /usr/local/share/pkgconfing
					   OK /usr/share/pkgconfig
					   OK PKG_CONFIG_PATH

	~/.gfarm-s3/secret_key		-- S3 secret key of user

	/etc/sudoers.d/gfarm-s3		-- sudo settings for WebUI-User

Reverse Porxy configuration:
	etc/gfarm_s3_local_user_map	-- user list
					   updated by  gfarm-s3-useradd and gfarm-s3-viusermap
	etc/apache-gfarm-s3.conf	-- static part of reverse-proxy configuration

	var/gfarm_s3_user_port_map	-- port list of each user
					   updated by 
	var/rewrite.conf		-- essential part of reverse-proxy configuration
					   dynamically generated from gfarm_s3_local_user_map

Lock files ($GFARM_S3_LOCKDIR):
	var/update_portmap.lock		-- lock file while editing 
	var/update_usermap.lock		-- lock file while editing gfarm_s3_local_user_map


  [90%] MinIO改修                                                 {-7/E}

     [100%] package gfarm -- MinIOとgatewayとのインタフェース
       [100%] Multipart putのローカルキャッシュの実装
         設計方針: 書込み先の選択
           - ローカルキャッシュへのWriteの都度、プロセスでの合計の書込み
             サイズを更新し、指定量と比較して判断
           - 一度Gfarmに書き始めたらローカルキャッシュには戻らない
           - ファイルシステムの一部の容量のみを使用した運用を考慮し、
             statvfsでの残量確認は行わない
         [100%] ローカルキャッシュの使用可能サイズの指定
         [100%] ローカルキャッシュのサイズの管理
         [100%] 対応するGfarmファイルの拡張属性 (user.gfarms3.offset) に記録
         [100%] ローカルキャッシュからRead時にuser.gfarms3.offsetに
              記録されたサイズまでしか読まない
         [100%] ローカルキャッシュからRead時にuser.gfarms3.partsizeに
              記録されたサイズ以下しか読めなかった場合に例外を生成
         [100%] partごとの健全性の確認
           - 以下のchecksumの一致を確認
             - MinIOが受け取った時点のpartごとのMD5
             - (結合時) ローカルキャッシュ+GfarmからRead時のpartごとのMD5
           - 有効化/無効化スイッチも用意する (既定値: 有効)
             - PARTFILE_DIGEST=yes/no
           - 受け取った時点のMD5はGfarmファイルの拡張属性に記録
             - user.gfarms3.part_digest
       [100%] Gfarm、ローカルキャッシュの外部指定機能追加
         必須の引数 (gfarmHomedirName, gfarmSharedDir, gfarmSharedVirtualName) 
         はポジショナル引数
         - GFARMS3_CACHE_BASEDIRがunsetならcacheが無効となる
           otherwise GFARMS3_CACHE_BASEDIRがsetされていたらchacheが
              有効となりGFARMS3_CACHE_SIZE_MBの指定が必須、既定値なし
         - その他の設定は環境変数で設定
         - 現状の設定一覧、デフォルト値は/usr/local/etc/gfarm-s3.conf参照
         - バケット置き場 ("gfarm:///shared" など) をMinIO起動時に指定可能
           であるが、Gfarmユーザ間ファイル共有機能 ("sss") 実装のために
           (バケット置き場をスキャンする必要あり) 全てのサイトで同一の
           設定としなければならない
       [100%] mcコマンドでのminioの停止、状態取得
         エラー戻り値に関するMinIO gatewayの仕様を守っていない実装を修正
       [100%] "gfarm://" をprefixして動作するか確認
       [100%] 既存ファイルがアクセスできることを確認

       [100%] Multipart putのコード改善
         - 大きな処理ブロックを関数にまとめる

!    [100%] Gfarmユーザ間ファイル共有機能 ("sss") 関連コードの整理
       - 引数の仕様変更

     [90%] package gfarmClient
       - package gfarmとGfarmとのインタフェース
       - posix相当の汎用パッケージ
       [100%] 拡張属性操作関数 実装
         [100%] gfarmClient.LSetXattr => gfs_lsetxattr
         [100%] gfarmClient.LGetXattrCached => gfs_lgetxattr_cached
       [100%] gfarmClient.StatFs実装
              - gatewayの実装では使用されていないとみられる、詳細を確認中
!      [90%] エラーメッセージのタイミングと内容検討・実装
              - MinIOコード中でlogを記録しなければならい場所を確認中
                (エラー検出タイミング) の洗い出し作業を進めている
!             - gfarm2fs_check_errorを参考にする (releaseを除く)
@@@
!                "case errors.Is(err, syscall.ENOTEMPTY):" を通るか確認
!                エラーメッセージはクライアントに返されるか?

         [100%] gflog_debugを3引数までの可変引数に修正

         [100%] gflog_info, gflog_warning, gflog_error, gflog_fatalをgo言語から
           呼べるように実装する

       [100%] func IsNotExist(err error) bool
       [100%] func IsExist(err error) bool
       [100%] C.GFARM_ERR_ALREADY_EXISTS

  [80%] Gfarm-s3制御関連コマンド                                  {-7/E}
     - gfarm-s3-login
     - gfarm-s3-server
     - その他コマンド
       - gfarm-s3-configtest
       - gfarm-s3-useradd
       - gfarm-s3-viusermap
       - gfarm-s3-generate-usermap-hpci
@@       - gfarm-s3-update-reverse-proxy	=> 廃止
       - gfarm-s3-sharedsecret-password

     [100%] user-portの割当方法の変更
       - gfarm-s3-serverがMinIO起動時の空きportを使用
               (MinIO起動時に毎回portを決定する)
               MinIO起動に成功したportをgfarm-s3-loginに通知
               gfarm-s3-loginはそのportをgfarm_s3_user_port_mapファイルに反映
               gfarm-s3-loginがreverse proxyの設定を生成、再起動

            - 効果
              - ポート番号を他ユーザ・他アプリ先行使用による利用不可や、
                意図的なトラップ設置の心配がなくなる
              - 管理者がポート番号を管理せずに済む
              - ポート番号が変更された場合を想定したシステムの挙動を検
                討する必要もない

            - ポート番号のデフォルト範囲 (最小値最大値) は共通のデフォルト
              範囲をシステム用設定 (gfarm-s3.conf) に定義

            - c.f. 以下のsysctlでephemeral portとして使用しないポートを指定可
                Linux  -- net.ipv4.ip_local_port_range
                          net.ipv4.ip_local_reserved_ports
                NetBSD -- ip.lowportmin, ip.lowportmax
                          ip.anonportmin, ip.anonportmax

     [100%] 制御端末を持たないプロセスからGfarm-s3制御関連コマンドが
       実行可能であること確認
         - sudoers: Defaults !requiretty
         - (参考) 開発環境のsudo (1.8.23) の設定ではttyなしsudoが可能

     [80%] gfarm-s3-login -- WebUIから呼ばれる
       - usage: gfarm-s3-login start|stop|cycle global-username password
       [100%] 認証認可機能 -- global usernameからlocal usernameを決定
         - 専用マップファイルgfarm_s3_local_user_mapを作成
         - 前提: 一人のユーザが複数のglobal usernameを単一の
           local usernameで使い分けるという運用は想定しない
            => 必要であれば複数ローカルアカウントを作成
       [100%] gfarm-s3-loginのサブコマンド名
         - サブコマンド名 "cycle" を "restart" に変更

       [100%] myproxy-logonでの認証
         - HPCI向け設定のmyproxy-logonを使用して動作確認済
       [100%] grid-proxy-initでの認証
         - パスフレーズ有りの秘密鍵を利用して動作確認済

         - 認証手順から秘密鍵の存在確認を削除、新しい手順は以下:
          | grid-proxy-init実行

         - 環境変数で秘密鍵を指定している場合grid-proxy-initも失敗する
         - 環境変数による秘密鍵の位置指定はサポートしない
           - ドキュメントに明記
           - 技術的理由: "sudo -i" の使用を避けるため

       [100%] $HOME/.gfarm_shared_keyのdigestでの認証

       [100%] 認証方式ごとの有効・無効設定
          gfarm-s3.confで認証方式ごとに使用の有無を指定
          (ユーザごとの設定ではない)
          GFARMS3_LOGIN_METHOD=myproxy-logon,grid-proxy-init,gfarm-shared-key

       [0%] SELinuxでの動作確認

       [60%] sudoers設定の検討・確認、権限の範囲を必要十分にする

        現在、下記の設定で動作
        | user2 ALL=(%gfarms3) NOPASSWD: /home/user1/work/gfarm-s3-minio-web/bin/gfarm-s3-server
        | user2 ALL=(%gfarms3) NOPASSWD: /usr/bin/grid-proxy-info
        | user2 ALL=(%gfarms3) NOPASSWD: /usr/bin/grid-proxy-init
        | user2 ALL=(%gfarms3) NOPASSWD: /usr/bin/myproxy-logon
        | user2 ALL=(%gfarms3) NOPASSWD: /usr/local/bin/gfkey
        |
        | # user2の部分は、運用時はapacheの権限 (httpdユーザ) を想定
        | # パスなど環境による違いはconfigureで生成を想定
        [100%] gfarm-s3を使用するユーザをgfarms3グループに追加し、
            sudoersで "(ALL)" を "(%gfarms3)" に変更
            - 仮に、sudoersで "(ALL)" を "(%user1)" として動作を確認
          [100%] - 上記設定例でuser1グループの他ユーザの起動テスト
                 - 次項目のテストで十分
          [100%] - user1をgfarms3に変更
@@@
!      [0%] - (ALL - %wheel) のような指定ができないか調査する

       [0%] 認証認可機能 テスト用手順書

       [100%] デフォルトコンフィグ機能 (/usr/local/etc/gfarm-s3.conf)
       [100%] reverse proxy設定 -- 抽象化した実装とする

       [100%] reverse proxy設定生成機能
         - reverse proxyの設定を生成
           apachectlによりapacheを再起動
         - 将来NginXにも対応することを想定した設計とした
!        - シェル関数 update_reverse_proxy に移行

       [100%] aws_access_key_idが壊れているユーザを無視する
         - 後述のaws_access_key_id保管場所を変更により不要となった

       [80%] 証明書の期限を表示するコード断片をgfarm-s3-loginに移動
         - 前回の方針ではgfarm-s3-serverへの移動予定であったが、
           gfarm-s3-loginに集約することとした
         [100%] myproxy-logon, grid-proxy-initで認証しgrid-proxy-infoを使用
         [100%] "gfkey -l" で認証した場合は "gfkey -e" を使用
            - "gfkey -e" の出力をパースする (strftime, parsedateを使用)
            - expiration time is Fri Jul 16 06:05:52 2021

       [100%] "gfkey -E" で共有鍵の有効期限をunix time (秒) で表示する機能は実装しない

         [100%] json形式 (--json) で出力する場合はunix time (epochからの経過
           時間) とする、期限切れの場合は-1
         [100%] jsonにgfarm_s3_local_user_mapのエントリを含める

        | {
! 以下1行追加
!       |   "status": "success"|"failure",                      
        |   "authenticated-method": $authenticated_method,                      
        |   "expiration-date": $expiration_date,
        |   "global-username": ...
        |   "local-username": ...
        |   "access-key": ...
        | }

!      [100%] WebUIでのユーザごとのGfarmのディレクトリ位置の指定 (設計変更)
        gfarm-s3-login 
            defatult動作: system設定のパス + global_username
            override動作: 与えられたパス
        gfarm-s3-server: パスの加工は行わない
        MinIO (gateway-gfarm) 加工しない (現在の実装はglobalをくっつけたりする)
             先頭の "/sss" は ".." に書換える

        - WebUIでユーザが使用するGfarmのディレクトリ位置を指定可能とする
          この場合には (gfarm-s3-loginは) global usernameを付加しない
        - Gfarmのディレクトリ位置をシステム設定とは別のパスを指定した場合、
          "sss" による共有機能は (無効にするわけではないが)、利用できなくなる
        - ログインするたびに、ディレクトリ位置を指定して変更できるよう
          になる想定。アクセスキーのID、シークレットは変わらない

       [100%] gfarm-s3-serverを呼び出してMinIOを起動する
         [100%] MinIO起動成功時portで、gfarm_s3_user_port_mapを更新 (登録)
                gfarm-s3-update-reverse-proxyを呼出し
@@@
!		update_reverse_proxyを呼出し

XXX
!        [100%] 既にMinIOが起動している場合の処置
             既にMinIOが起動していることを検知し、なにもしない

!      [100%] gfarm-s3-serverを呼び出してMinIOを停止する
!        [100%] MinIO停止に成功してもしなくても、gfarm_s3_user_port_mapを更新 (削除)
!               gfarm-s3-update-reverse-proxyを呼出し
@@@		update_reverse_proxyを呼出し

         - MinIOが想定外理由で停止した場合gfarm_s3_user_port_mapに
           エントリが残り (ゴミ化する) このポートは試さなくなる
           同一local_usernameでMinIOの起動に成功すると上記のゴミエントリは消える

         - 変数名について

         バケット置き場の1つ親ディレクトリ
         gfarmSharedDir                    -- MinIOでの名前
         GFARMS3_GFARM_SHARED_DIR          -- gfarm-s3.confでの名前

         バケット置き場の名前 (通常はglobal username指定を想定)
         gfarmHomedirName                  -- MinIOでの名前

         sssの名前
         gfarmSharedVirtualName            -- MinIOでの名前
         GFARMS3_GFARM_SHARED_VIRTUAL_NAME -- gfarm-s3.confでの名前

       例:
         gfarmSharedDir          "gfarm:///shared"
         gfarmHomedirName        "hpci005858"
         gfarmSharedVirtualName  "sss"

      Gfarm                       -- S3 API
      /shared                     -- アクセス不可
      |-- hpci005858              -- バケット置き場 "s3://"
      |   |-- .minio.sys          -- 不可視
      |   |-- mybucket            -- バケット       "s3://mybucket"
      |   `-- sss                 -- 仮想バケット
      |       `-- hpci001971      -- プレフィックス "s3://sss/hpci001971"
      |       .   |-- .minio.sys  -- 不可視
      |       .   `-- bucket1     -- プレフィックス "s3://sss/hpci001971/bucket1"
      |       .   .   `-- object1 -- オブジェクト
!     |       .    .. (bucket2)   -- bucket2はhpci001971直下のリストには現れない
!     |        .. (hpci001970)    -- hpci001970はsss直下のリストには現れない
      |
      |-- hpci001971
      |   |-- .minio.sys
      |   |-- bucket1              -- ACLを用いてhpci005858にアクセスを許可
      |   |   `-- object1
      |   `-- bucket2              -- bucket2は公開しない
      `-- hpci001970
          |-- .minio.sys
          `-- bucket3              -- bucket3は公開しない

     - MinIOの動作 (gfarmSharedDir, gfarmHomedirName, gfarmSharedVirtualName)
       - バケット置き場はgfarmHomedirName + gfarmHomedirNameとなる
         - gfarmHomedirNameを空文字列とするとバケット置き場として
           gfarmSharedDirを使用する
         - "sss" マッピング機能が (gfarmSharedVirtualNameの指定に依らず) 無効となる
       - gfarmSharedVirtualNameを空文字列とすると "sss" マッピング機能が無効となる

     [80%] gfarm-s3-server -- gfarm-s3-loginから呼ばれる
        - オプション追加
        $0 [--start] [--access_key access_key] [--secret_key secret_key] \
           [--port port] [--global_username global]

        $0 --stop    [--access_key access_key] [--secret_key secret_key] \
           [--port port]

        $0 --status  [--access_key access_key] [--secret_key secret_key] \
           [--port port]

       [100%] 操作が成功したら、port番号をstdoutに返す
         - 前回の議論では、json形式でかえすものとしていた
       [0%] gfarm-s3-serverの出力形式の指定
           --json | --human (デフォルト)
       [100%] MinIOの起動
       [100%] Gfarmの共有鍵 (.gfarm_shared_key) のdigest表示コマンドの実装
         - gfarm-s3-sharedsecret-passwordとする
       [100%] shell scriptに書換え
       [100%] MinIOコマンドランの引数順は以下の例のとおりとする
         - 変更前: minio gateway gfarm --address 127.0.0.1:9001 gfarm:///shared sss
         - 変更後: minio gateway gfarm --address 127.0.0.1:9001 global_username gfarm:///shared sss
         - "--address" は "gateway gfarm" に対するオプションと考える
       [100%] 環境変数によるコンフィグ上書き機能
       [100%] MinIOを停止する (--stop)
         - gfarm_s3_user_port_mapは更新しない (gfarm-s3-login, gfarm-s3-viusermapの管轄)
         - 環境変数USERを参照してgfarm_s3_local_user_mapからaccess_keyを取得、
           secret_keyは~/.gfarm-s3/secretから取得 (MinIO起動時と同条件)
         - 環境変数USERと実効uidが異なる場合はsecret_keyが読めないため停止不可
         - mc config host add $PROFILE $ENDPOINT_URL $access_key $secret_key
         - mc admin service stop $PROFILE
       [100%] MinIOの状態を取得する (--status)
         - ユーザ名は環境変数USERから取得
         - 実効uidが異なる場合はsecret_keyが読めないため状態を取得不可
       [100%] mcでシークレットキーが異なる場合に接続失敗すること
         およびその際のシークレットキーの漏洩はないことを確認

@@@
!    [100%] 起動しようとしている際に、userがgfarm_s3_user_port_mapに残っている場合
!       1. mcで接続成功 && pidのプロセスが存在する
!          => なにもしない
!       2. そのポートを優先的に試す

@@@
!    [100%] gfarm-s3-login status
!       "gfarm-s3-server --status" を呼ぶ

     [80%] その他のコマンド

       [90%] gfarm-s3-configtest -- gfarm_s3_local_user_mapの
         エラーチェックコマンド
         - gfarm-s3-loginも同様のエラーチェックを行う
         - usage: gfarm-s3-configtest
         - チェックする項目
           - global username, local username, port, access_keyそれぞれユニーク
             (global usernameがprimary key)
           - local usernameの存在確認
@@@
           - 分かり易いエラーメッセージを出力

@@@
!       [100%]
          - global_username, local_usernameのパターンは以下のとおりとする
            文字種: Char - (':' | '\n' | '\0')
            Minumum length: 1
            Maximum length: (unlimited)
          - access_keyは、minimum length以外はS3 (IAM) 規格に准じる
            文字種: [A-Za-z0-9_]
            Minumum length: $GFARM_S3_ACCESS_KEY_MIN_LEN (default 8)
            Maximum length: 128

       [90%] gfarm-s3-useradd -- gfarm_s3_local_user_mapにユーザを追加
         - usage: gfarm-s3-useradd global-username local-username [access_key_id]
         - if access_key_idがコマンドラインで未指定
              if global usernameが、S3のaccess_keyのスペックを満たす
                 global-usernameをaccess_key_idとする
              else
                 UUIDベースでaccess_key_idを自動生成
!        - [100%] 「S3のaccess_keyのスペックを満たす」
!            gfarm-s3-configtestと共通のシェル関数を呼ぶ              
         - gfarm-s3-useraddが必要とする権限
           - gfarm_s3_local_user_mapへの書込み
           [100%] - reverse-proxyの再起動
             - このコマンド後のreverse-proxyの再起動は不要
         - gfarm_s3_local_user_mapの更新について (後述)

       [100%] ユーザを削除・変更するコマンド -- gfarm_s3_local_user_mapを編集
         - gfarm-s3-viusermap

         [100%] gfarm_s3_local_user_map, gfarm_s3_user_port_mapはリネームで
           アトミックに更新する
           - 対象ファイルとは別のファイルを使用し排他制御
           - backup作成は (リネームではなく) コピーで作成
             リネームでbackupを作成すると対象ファイルががわずかの間不在となる
@@@        - 疑問点: 上記手順の場合にexclusiveロックを対象ファイルに掛けて良いのか?
@@@
!        [100%] access_keyが変更されたユーザのMinIOを停止、reverse-proxyに反映
!          - 1. gfarm-s3-diff-local-usermapを呼び出して停止するMinIOをリストアップ
!          - 2. "gfarm-s3-login stop" と共通のシェル関数stop_per_user_serverを呼び出す
!               2.1 "gfarm-s3-server --stop"を呼び出してMinIOを停止
!               2.2 gfarm_s3_user_port_mapを更新
!               2.3 gfarm-s3-update-reverse-proxyを呼出し
@@@		    update_reverse_proxyを呼出し
             viusermap経由の場合、パスワードを必要としない
         - owner: WebUI  mode: 4555

       [100%] gfarm_s3_local_user_map編集後の差分チェック
         - シェル関数として実装
         - 削除されたユーザ (access_key) をリストアップ
         - access_keyを変更せず、global username, local usernameを
           変更することは禁止
         - access_keyを削除して追加することは可能
           - 削除した段階でMinIOが停止される
           - 追加後はユーザがログイン操作を行わなければならない
!        [100%] gfarm_s3_local_user_mapを編集後に停止するMinIOの決定
@@@         gfarm-s3-diff-local-usermapは廃止
@@@         シェル関数を呼び出すように変更
!          - コマンド名: gfarm-s3-diff-local-usermap
           - 起動中 && (access_keyが削除された ||
                      access_keyに対するlocal userが変更された ||
                      access_keyに対するglobal userが変更された)
           - join, commコマンドを使用する
!          - 実装ではaccess_keyではなくlocal_usernameを抽出

!    下記コマンド (gfarm-s3-stop-server) は廃止
!      [100%] MinIOを停止するコマンド (外部コマンド)
!        - gfarm-s3-loginと同じ権限で動作
!          - サーバの停止はgfarm-s3-serverを呼ぶ
!            sudo -u $USER gfarm-s3-server --stop ...
!          - gfarm_s3_user_port_mapを更新する

!   下記、作業なしとなった
!   [100%] システム起動時のgfarm_s3_user_port_mapの扱い
!    - システム起動時にgfarm_s3_user_port_mapの内容は保持する

!   [100%] gfarm_s3_user_port_mapの形式変更

     :: 現在 ::
       | access_key:port

     :: 変更後 ::
       | local_username:port:pid

     - access_keyはgfarm_s3_user_port_mapに記録しない
     - acess_keyが変更されても、ユーザごとのポート番号の割当が変わらない
     - rewrite.confの生成時に別途access_keyを取得する手段を実装する
     - viusermap終了時に、削除されたユーザをgfarm_s3_user_port_mapから
       削除する   => このユーザのMinIOを停止する

!   [100%] 調査: MinIOをmcで停止するのと、kill -TERMで停止するのとでは
!      どちらが作法に則っているか
!    - どちらでも後始末してから終了する
!      "gfarm-s3-server --stop" はuserにスイッチ済みであり、
!       killはそのまま呼べる

        スケッチ
        | fn() {
        |         mc admin stop
        |         for i in $(seq 1 1 5); do
        |	          sleep 1
        |                 if ! kill -0 $pid; then
        |                         return
        |                 fi
        |                 kill -TERM $pid
        |         done
        |         kill -KILL $pid
        | }
@@@ MinIOの終了処理で、sleepしてみる

@@@
    [0%] MinIOを停止しても、
      gfarm_s3_user_port_mapから当該エントリを削除はしない

      [新規調査項目] mcでシャットダウン処理中に "kill -TERM" を呼んだ場合の振舞

       [10%] gfarm-s3-generate-usermap-hpci -- grid-mapfileと
               gfarm_s3_local_user_mapを同期するコマンド
         - HPCI専用
         - grid-mapfileからgfarm_s3_local_user_mapを生成するコマンドを実装
           CNに記載されているHPCI-IDとlocal userを利用
           HPCI-IDを主キーにして差分更新
         - usage: gfarm-s3-generate-usermap-hpci \
                [--grid-mapfile grid-mapfile] \
                [--output /usr/local/etc/gfarm_s3_local_user_map] \
                [--help]
         - ローカルユーザの増減時に管理者により実行される想定

!      [90%] gfarm-s3-update-reverse-proxy -- gfarm_s3_local_user_mapから
              reverse proxyの設定を生成するコマンド
         - gfarm_s3_local_user_mapからrewrite.conf更新 && reverse proxyに反映
         - gfarm-s3-useradd, gfarm-s3-generate-usermap-hpciが呼び出す
         - gfarm_s3_local_user_mapは直接編集しないものとする
@@@	シェル関数 update_reverse_proxy に移行

@@@
!        - [100%] (生成されるconfigに) 変更がなければconfigを更新
!            せずreverse proxyの再起動も行わない

       [100%] gfarm-s3-sharedsecret-password  -- $HOME/.gfarm_shared_keyのdigestでの認証
              に使用するキーを生成するコマンド
         - gfkey -l|openssl sha256
         - gfarm-s3-loginから呼ぶ場合はsudo -u $localuserが必要

     - 設定ファイル

        - /usr/local/etc/gfarm-s3.conf
        - /usr/local/etc/gfarm_s3_local_user_map
        - /home/user1/.gfarm-s3/secret_key
        - /etc/httpd/conf.d/gfarm-s3.conf
        - /usr/local/var/gfarm-s3/rewrite.conf

        :: /usr/local/etc/gfarm-s3.conf
        | GFARMS3_LOCAL_USER_MAP=/usr/local/etc/gfarm_s3_local_user_map
        |
        | # 以下はgfarm-s3-server (がMinIOを呼び出すとき) の既定値
        | GFARMS3_GFARM_BUCKET_ROOTDIR=gfarm:///shared
        | GFARMS3_GFARM_SHARED_DIR=sss
        | GFARMS3_CACHE_BASEDIR=/mnt/data/tmp
        | GFARMS3_CACHE_SIZE_MB=8
        |
        | #以下はgfarm-s3-logonの既定値
        | MYPROXY_LOGON=/usr/bin/myproxy-logon
        | GRID_PROXY_INIT=/usr/bin/grid-proxy-init

        | GFARMS3_APACHE_REWRITE_CONF=/usr/local/var/gfarm-s3/rewrite.conf
        | APACHECTL=/usr/sbin/apachectl
        | MYPROXY_SERVER=portal.hpci.nii.ac.jp
        | PROXY_LIFETIME=168
        | GFKEY=/usr/local/bin/gfkey
        | GRID_PROXY_INFO=/usr/bin/grid-proxy-info
        |
        | #以下はgfarm-s3-serverの既定値
        | MINIO_PATH=/home/user1/go/bin/minio
        |
        | #gfarm-s3-server実行時には同名の環境変数で上書き可能
        | #gfarm-s3-login実行時には環境変数での上書き不可

        | GFARMS3_PARTFILE_DIGEST=yes
        | GFARMS3_METADIR=~/.gfarm-s3
        | GFARMS3_SECRET_KEY=$GFARMS3_METADIR/secret_key
        | GFARM_S3_BIN=/home/user1/work/s3g/bin
        | GFARMS3_USER_PORT_MAP=/usr/local/var/gfarm-s3/gfarm_s3_user_port_map
        | GFARMS3_LOGIN_METHOD=myproxy-logon,grind-proxy-init,gfarm-shared-key
        | GFARMS3_APACHE_REWRITE_CONF=/usr/local/var/gfarm-s3/rewrite.conf
        | APACHECTL=/usr/sbin/apachectl

        :: /usr/local/etc/gfarm_s3_local_user_map  (2020-07-17更新)
        | # THIS FILE MUST BE EDITED BY `gfarm-s3-viusermap'
        | hpci005858:user1:K4XcKzocrUhrnCAKrx2Z
        | hpci005859:user2:qzjjOwLjeWptTFUZVThs

       - ユーザ名に使えない文字はあるか? とりあえず ":" で実装する
       - ":" が衝突したらチェックコマンドで丁寧な説明を出力する

        :: /home/user1/.gfarm-s3/secret_key
        | 39e+URNfFv/CCgs4bYcBMusR7ngMLOxEf6cpXWpB

       - reverse proxy設定ファイル

        :: /etc/httpd/conf.d/gfarm-s3.conf
        | ServerName 192.168.224.22
        | <VirtualHost *:80>
        | (省略)
        |        RewriteEngine on
        |        Include /usr/local/var/gfarm-s3/rewrite.conf
        |        ProxyPreserveHost on
        |        ProxyAddHeaders off
        | (省略)
        | </VirtualHost>

        :: /usr/local/var/gfarm-s3/rewrite.conf
        |         RewriteCond "%{HTTP:Authorization}" "Credential=K4XcKzocrUhrnCAKrx2Z/"
        |         RewriteRule "^/(.*)$" "http://127.0.0.1:9001/$1" [P]
        |         RewriteCond "%{HTTP:Authorization}" "Credential=qzjjOwLjeWptTFUZVThs/"
        |         RewriteRule "^/(.*)$" "http://127.0.0.1:9002/$1" [P]

   [0%] Gfarmアクセス用S3互換IF制御機能 (WebUI)                    {-8/M}
       [0%] WebUIでの表示言語
         - WebUIの表示言語はen, jaの2種類とする
   [10%] Gfarmユーザ間ファイル共有機能 ("sss") 実装                {-9/M}
     [100%] path書換えをメソッド化
       [100%] func (n *gfarmObjects) gfarm_url_PathJoin(pathComponents ...string) string
       [100%] func (n *gfarmObjects) gfarm_cache_PathJoin(pathComponents ...string) string

       [0%] Gfarmでアクセス不可のディレクトリをS3から不可視にする

   [0%] バケット置き場および共有機能 "sss" の取扱い
     - gfarm-s3.confには、バケット置き場の一つ上のディレクトリと
       共有ディレクトリを示す仮想バケット名を指定する
       | GFARMS3_GFARM_BUCKET_ROOTDIR=gfarm:///shared
       | GFARMS3_SHARED_VIRTUAL_NAME=sss
       - 変数名がバケット置き場の一つ上のディレクトリと分かるようにした
       - "sss" の名前GFARMS3_SHARED_VIRTUAL_NAMEは仮
         (本議事録では、以降 "sss" と表記)
     - (必要に応じて) gfarm-s3-loginが$global_usernameを
       $GFARMS3_GFARM_BUCKET_ROOTDIRに付加する
       (通常はバケット置き場の最後のコンポーネントは$global_usernameであ
        るが、それには限定しない実装とする)
     - gfarm-s3-loginが$global_usernameに "/" が含まれないことを保証する
     - gfarm-s3-serverはスルーする (加工しない)
     - MinIOに指定するのはバケット置き場および "sss"
     - MinIOでの扱い
       - $global_usernameを付加されたバケット置き場と "sss" を受け取る
       - バケット置き場の1階層上が、GFARMS3_GFARM_BUCKET_ROOTDIRと一致す
         ると仮定する (gfarm-s3-loginが保証している)
       - S3パス部分の操作はPathJoinを使用して正規化
         バケット置き場は編集・正規化はしない
       - S3のパスの先頭のコンポーネントが "sss" ならば、".."に置換
         (バケット置き場の最後のコンポーネントとS3の先頭コンポーネントの
          "sss" を削って結合する操作はMinIOではおこなわず、Gfarmに任せる)
       - "/sss" のリスティングに、"sss/自分" を含めるものとする (除外しない)
         - "sss/自分/sss" としても2つ目の "sss" は解釈されないため
           無限ループに陥ることはない
       - "/" のリスティングには "sss" が含まれるが、
         "sss/自分" のリスティングには "sss" は含まれない

     [0%] WebUIでユーザ・グループ選択、アクセス許可・不許可
        - gf_accessは使用不可
        - gfgetfaclは呼び出しコストが高い
        - stat情報にはACL情報が含まれない
        - gfmdに機能追加し、アクセス可能かどうかを高速に判定できるようにする
   [0%] インストール手順の自動化 (orインストールドキュメント化)    {-9/E}
     [0%] 設定ファイルの場所等をconfigureで指定
     [100%] pkg-config作成
        - Gfarmソースパッケージ本体へ組み込む想定で用意する
@    [0%] ファイル名をgfarm.pcとし、gfarm-2.7に含める

        :: /usr/lib64/pkgconfig/gfarm-2.7.pc
        | prefix=/usr/local
        | exec_prefix=${prefix}
        | libdir=${exec_prefix}/lib
        | includedir=${prefix}/include
        | 
        | Name: Gfarm
        | Description: Gfarm filesystem
        | Version: 2.7.16
        | Libs: -L${libdir} -lgfarm -Wl,-rpath,${libdir}
        | Cflags: -I${includedir}

        :: gfarm-2.7.pc.in
        | prefix=@PREFIX@
        | exec_prefix=${prefix}
        | libdir=${exec_prefix}/lib
        | includedir=${prefix}/include
        | 
        | Name: Gfarm
        | Description: Gfarm filesystem
        | Version: @VERSION@
        | Libs: -L${libdir} -lgfarm -Wl,-rpath,${libdir}
        | Cflags: -I${includedir}

     [0%] reverse proxyの設定ファイルのパスをinstall時にconfigurable化
     [0%] 各種コマンドのパスを検索、自動設定

     [100%] configureでsudo設定例を生成 (調査)
       /usr/local/share/examples/sudoers.gfarm-s3
       - /etc/sudoers.d/gfarm-s3にgfarm-s3のみの設定記述で十分なことを確認

   [0%] パッケージング                                             {-9/E}
     [0%] configureでsudo設定を生成

   [5%] テスト                                                     {-10/E}
     [10%] 自動テスト作成
       - Boto3を利用して作成作業中
          前提: gfarm_initialize()が成功する環境
@@@
          MinIOの起動は自動でやる => secret_keyは自由に設定できるはず
       - MinIOの自動テストを作成
       - 正常系で使用されるコードパスを全て通るようにする
       - python unittestを使用
       - MinIOと同一のサーバ上で動作
     [0%] aws以外のS3クライアントを試す
     - コマンド、WebUIは別途手動で実施

   [0%] ドキュメント                                               {-10/E}

   [0%] "gfarm:/shared/$username" 予め作成が必要 (運用マニュアル追記必要)
     - gfarm-s3システム側の運用管理者ではなく、Gfarmシステム本体側の運
       用管理者に作成してもらう必要がある。
     - "/shared" をworld writableにすると、他人のバケット置き場を作るこ
         とができるようになるため

   [0%] NginX対応                                               {優先度低}

* 検討事項

   [0%] gfarm-s3のuninstall機能
         - uninstall手順書を作成
           消すべきファイルがなるべくまとまっているとわかりやすい
         - uninstallerを作成
           あまりuninstallerを使いたくない管理者がいるかもしれない

   [0%] インストール時のシステム管理者の手間を軽減する
        gfarm_s3_local_user_map定義はシステム管理者が作成するしかない
        gfarm-s3-setupコマンドを用意し、作成を補佐する
          - sampleを作っておく
          - HPCIの場合はgfarm-s3-generate-usermap-hpciの使用を促す
        その他設定項目も、自動化できる部分や案内すべき部分を想定・把
        握しながら、実装を進める

* 調査

   [0%] Multipart putの途中でMinIOがクラッシュした場合の振舞    {優先度低}

   [0%] MinIOでBucket Policyを実施した場合にMinIOがチェック     {優先度低}
        しているか? それともfilesystemやgateway側のアクセスコントロール
        機能に頼っているか?
        - 背景: * GfarmはBucket Policyに相当する機能がない
                * S3には以下の3種類のアクセスコントロールがある
                  ACL, Bucket Policy, IAM Policy
                * MinIOだけで実装可能か確認する

   [0%] S3やAzureのSSEでメタデータはencryptされているか調査     {優先度低}
